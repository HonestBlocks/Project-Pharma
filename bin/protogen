#!/usr/bin/env python3

import os
import tempfile
from glob import glob
import re
import subprocess
import sys


try:
    from grpc.tools.protoc import main as _protoc
except ImportError:
    print("Error: grpc.tools.protoc not found")
    exit(1)


JOIN = os.path.join
TOP_DIR = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))


def main(args=None):
    if args is None:
        args = sys.argv[1:]

    proto_dir = JOIN(TOP_DIR, "protos")

    protoc(proto_dir, TOP_DIR, "sawtooth_sdk/protobuf")


def protoc(src_dir, base_dir, pkg, language="python"):
    if language == "python":
        protoc_python(src_dir, base_dir, pkg)


def protoc_python(src_dir, base_dir, pkg):

    pkg_dir = JOIN(TOP_DIR, base_dir, pkg)
    os.makedirs(pkg_dir, exist_ok=True)

    init_py = JOIN(pkg_dir, "__init__.py")
    if not os.path.exists(init_py):
        with open(init_py, "w") as fd:
            pass

    with tempfile.TemporaryDirectory() as tmp_dir:
        tmp_pkg_dir = JOIN(tmp_dir, pkg)
        os.makedirs(tmp_pkg_dir)

        cwd = os.getcwd()
        os.chdir(src_dir)
        proto_files = glob("*.proto")
        os.chdir(cwd)

        for proto in proto_files:
            src = JOIN(src_dir, proto)
            dst = JOIN(tmp_pkg_dir, proto)
            with open(src, encoding='utf-8') as fin:
                with open(dst, "w", encoding='utf-8') as fout:
                    src_contents = fin.read()
                    fixed_contents = fix_import(src_contents, pkg)
                    fout.write(fixed_contents)

        _protoc([
            __file__,
            "-I=%s" % tmp_dir,
            "--python_out=%s" % JOIN(TOP_DIR, base_dir),
        ] + glob("%s/*.proto" % tmp_pkg_dir))


def fix_import(contents, pkg, sub_dir=False):
    pattern = r'^import "(.*)\.proto\"'
    if sub_dir:
        template = r'import "%s/\1_pb2/\1.proto"'
    else:
        template = r'import "%s/\1.proto"'

    return re.sub(
        pattern,
        lambda match: match.expand(template) % pkg,
        contents,
        flags=re.MULTILINE)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
